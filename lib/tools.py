import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import os

class datariser():
    def __init__(self, data, name=None):
        self.data = data
        self.name = name

    def timeLength(self):
        self.timelyLength = self.getx()[len(self.data)-1]
        return self.timelyLength

    def fill(self, incriment):
        self.timelyLength = self.data[len(self.data)-1][0]
        self.startx = self.data[0][0]
        position = 0
        newdata = []
        newx = []
        newy = []
        for newxval in self.frange(self.startx, self.startx + self.timelyLength, incriment):
            #newx.append(newxval)
            #print("x:", newxval)
            if newxval < self.getx()[position]:
                #math
                #print()
                percentage = (newxval - self.getx()[position-1])/(self.getx()[position] - self.getx()[position-1])
                value = percentage * (self.gety()[position] - self.gety()[position-1]) + self.gety()[position-1]
                newyval = round(value,3)
                #print(percentage)
                #print("y:", value)
                newy.append(newyval)
                #newxval = newxval - 1

            elif newxval == self.getx()[position]:
                #print("y:", self.gety()[position])
                newyval = self.gety()[position]
                #newy.append(newyval)
                position = position + 1

            else:
                #print("y:", self.gety()[position])
                newyval = self.gety()[position]
                #newy.append(newyval)
                position = position + 1

            newdata.append([newxval,newyval])
        
        #print(newx)
        #print(newy)
        #return newx,newy
        self.data = newdata
        

    def getdata(self):
        dat = self.data
        return dat

    def getx(self):
        x=[]
        for i in range(0,len(self.data)):
            #print(i) 
            x.append(self.data[i][0])
        return x
    
    def gety(self):
        y=[]
        for i in range(0,len(self.data)):
            #print(i) 
            y.append(self.data[i][1])
        return y


    def frange(self, start, stop=None, step=None):
        #Use float number in range() function
        # if stop and step argument is null set start=0.0 and step = 1.0
        if stop == None:
            stop = start + 0.0
            start = 0.0
        if step == None:
            step = 1.0

        data = []
        value = start
        while value < stop:
            data.append(round(value,3))
            value = value + step
        return data


def truncate(n, decimals=0):
    multiplier = 10 ** decimals
    return int(n * multiplier) / multiplier


def mesh(a,b):
    new = []
    for pos in range(len(a)):
        new.append([a[pos],b[pos]])
    return new

def areaBetween(a,b):
    #print(a)
    inc = a[1][0] - a[0][0]
    score = 0
    #print("inc: ",inc)
    for pos in range(len(a)):
        score = score + abs( a[pos][1] - b[pos][1] )*inc
        #print(score)
    return score

def weightedAreaBetween(control, variable):
    #print(a)
    inc = control[1][0] - control[0][0]
    score = 0
    #print("inc: ",inc)
    for pos in range(len(control)):
        if pos > 5:
            score = score + abs( control[pos][1] - variable[pos][1] )*inc/3
        else:
            score = score + abs( control[pos][1] - variable[pos][1] )*inc
        #print(score)
    return score


def saveoutput(a, name = "output"):
    fig = plt.figure()
    ax = fig.add_subplot(111)
    for pos in range(len(a)):
        ax.plot(a[pos][0],a[pos][1])
    try:
        os.remove(name + '.png')
    except:
        #print("Not deleting")
        print("", end = "")
    fig.savefig(name)


def sampledata():
    t = [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300]

    sp = [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]

    op = [0,0,0,0,0,0,0,0,0,0,0.4,0.5,0.6,0.7,0.784773987,0.863383914,0.935464743,1.000686175,1.059328919,1.111446925,1.157161563,1.196657355,1.230155858,1.257918094,1.280237717,1.297434349,1.309847941,1.31783323,1.321754607,1.32198141,1.318883644,1.312828116,1.304174998,1.293274799,1.28046575,1.266071568,1.250399601,1.233739328,1.216361188,1.198515726,1.180433034,1.162322443,1.144372479,1.126751019,1.109605654,1.093064219,1.077235473,1.062209907,1.048060657,1.0348445,1.022602925,1.011363246,1.001139751,0.991934865,0.983740326,0.976538345,0.970302745,0.965000079,0.960590703,0.95702981,0.954268406,0.952254238,0.950932654,0.95024741,0.950141404,0.950557349,0.951438378,0.952728588,0.954373512,0.956320535,0.958519247,0.960921737,0.963482832,0.966160287,0.96891492,0.971710705,0.974514827,0.977297691,0.980032902,0.982697216,0.985270456,0.987735413,0.990077724,0.992285729,0.994350323,0.996264785,0.998024616,0.999627351,1.001072388,1.002360802,1.003495164,1.004479367,1.005318451,1.006018438,1.006586167,1.007029144,1.0073554,1.007573352,1.007691679,1.007719209,1.007664808,1.007537293,1.007345337,1.007097405,1.00680168,1.00646601,1.006097863,1.005704288,1.005291882,1.004866772,1.004434599,1.004000504,1.003569134,1.003144638,1.002730674,1.002330428,1.00194662,1.00158153,1.001237016,1.000914535,1.000615176,1.000339677,1.000088459,0.999861651,0.999659119,0.999480493,0.999325195,0.999192468,0.999081397,0.99899094,0.998919946,0.998867181,0.998831351,0.998811115,0.99880511,0.998811963,0.998830307,0.998858798,0.998896119,0.998940999,0.998992215,0.999048605,0.999109067,0.999172572,0.999238162,0.999304954,0.999372142,0.999438998,0.999504868,0.999569178,0.999631424,0.999691177,0.999748075,0.999801823,0.999852185,0.999898989,0.999942111,0.999981481,1.000017074,1.000048904,1.000077025,1.000101523,1.00012251,1.000140126,1.00015453,1.000165898,1.000174419,1.000180293,1.000183726,1.000184929,1.000184114,1.000181494,1.000177276,1.000171666,1.000164861,1.000157051,1.000148418,1.000139132,1.000129356,1.000119239,1.000108918,1.000098521,1.000088161,1.000077941,1.000067952,1.000058273,1.000048972,1.000040105,1.000031721,1.000023857,1.000016541,1.000009792,1.000003623,0.999998039,0.999993037,0.999988611,0.999984748,0.99998143,0.999978638,0.999976345,0.999974527,0.999973152,0.999972192,0.999971614,0.999971384,0.999971472,0.999971843,0.999972466,0.999973308,0.999974339,0.999975529,0.99997685,0.999978275,0.99997978,0.99998134,0.999982935,0.999984543,0.999986148,0.999987734,0.999989285,0.99999079,0.999992238,0.999993619,0.999994927,0.999996155,0.999997298,0.999998354,0.999999321,1.000000197,1.000000982,1.000001679,1.000002288,1.000002812,1.000003255,1.000003619,1.00000391,1.000004131,1.000004288,1.000004385,1.000004427,1.00000442,1.000004368,1.000004276,1.00000415,1.000003994,1.000003813,1.00000361,1.000003392,1.00000316,1.00000292,1.000002673,1.000002425,1.000002176,1.00000193,1.000001689,1.000001455,1.00000123,1.000001015,1.000000811,1.000000619,1.00000044,1.000000275,1.000000124,0.999999986,0.999999863,0.999999753,0.999999657,0.999999575,0.999999504,0.999999447,0.9999994,0.999999364,0.999999339,0.999999323,0.999999315,0.999999315,0.999999323,0.999999336,0.999999355,0.999999379,0.999999406,0.999999437,0.999999471,0.999999506,0.999999543,0.999999581,0.99999962,0.999999658,0.999999696,0.999999734,0.99999977,0.999999805,0.999999839,0.999999871,0.9999999,0.999999928,0.999999954,0.999999978,0.999999999,1.000000019,1.000000036,1.000000051,1.000000064,1.000000075,1.000000085,1.000000092,1.000000098,1.000000102,1.000000105,1.000000106,1.000000106]

    pv =[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.038065033,0.082023957,0.131315895,0.185433342,0.242468146,0.301556093,0.361880477,0.422670877,0.4832569,0.543037085,0.601478756,0.658117488,0.712554136,0.764452379,0.813535843,0.859584874,0.90243307,0.941963622,0.978105513,1.010829631,1.040144846,1.06609409,1.088750484,1.108213546,1.12460551,1.138067786,1.148757571,1.156844655,1.162508402,1.165934952,1.167314627,1.166839558,1.164701532,1.161090063,1.156190674,1.150183398,1.143241485,1.135530311,1.127206472,1.118417069,1.109299147,1.099979314,1.090573486,1.08118678,1.071913524,1.062837376,1.054031541,1.045559078,1.037473268,1.02981806,1.02262856,1.015931558,1.009746094,1.004084046,0.998950725,0.994345486,0.990262335,0.986690527,0.983615156,0.98101773,0.978876716,0.977168074,0.975865751,0.974942154,0.974368587,0.974115656,0.974153642,0.974452838,0.974983851,0.975717875,0.976626923,0.977684036,0.978863451,0.98014075,0.981492969,0.982898694,0.984338115,0.985793078,0.987247097,0.988685356,0.990094696,0.991463578,0.992782044,0.994041653,0.995235421,0.996357743,0.997404308,0.998372021,0.999258903,1.000064008,1.00078732,1.001429664,1.001992615,1.0024784,1.002889815,1.003230135,1.003503035,1.003712512,1.003862809,1.003958349,1.00400367,1.004003369,1.003962046,1.003884259,1.003774481,1.003637061,1.003476194,1.003295893,1.003099965,1.002891994,1.002675326,1.00245306,1.002228038,1.002002847,1.001779811,1.001561002,1.001348237,1.001143089,1.000946893,1.000760759,1.000585583,1.000422055,1.00027068,1.000131784,1.000005534,0.999891951,0.999790922,0.999702219,0.999625508,0.999560368,0.999506302,0.999462746,0.999429089,0.999404678,0.999388832,0.99938085,0.999380021,0.999385634,0.99939698,0.999413367,0.999434118,0.99945858,0.99948613,0.999516172,0.999548148,0.999581535,0.999615848,0.999650643,0.999685513,0.999720094,0.999754061,0.999787126,0.999819042,0.999849597,0.999878616,0.999905954,0.999931502,0.999955178,0.999976927,0.999996721,1.000014554,1.00003044,1.000044413,1.000056523,1.000066833,1.000075418,1.000082365,1.000087767,1.000091725,1.000094343,1.00009573,1.000095996,1.00009525,1.000093603,1.000091162,1.000088032,1.000084315,1.000080108,1.000075503,1.000070589,1.000065445,1.000060149,1.00005477,1.000049371,1.00004401,1.000038739,1.000033601,1.000028636,1.000023878,1.000019355,1.000015089,1.000011098,1.000007396,1.00000399,1.000000888,0.999998088,0.999995591,0.99999339,0.999991479,0.999989848,0.999988485,0.999987378,0.999986512,0.999985871,0.99998544,0.999985202,0.999985139,0.999985235,0.999985473,0.999985836,0.999986307,0.999986871,0.999987514,0.999988219,0.999988974,0.999989766,0.999990584,0.999991415,0.999992251,0.999993082,0.9999939,0.999994698,0.99999547,0.999996211,0.999996916,0.999997581,0.999998205,0.999998784,0.999999317,0.999999803,1.000000242,1.000000635,1.000000981,1.000001283,1.000001541,1.000001757,1.000001933,1.000002072,1.000002176,1.000002247,1.000002287,1.0000023,1.000002288,1.000002254,1.000002201,1.00000213,1.000002044,1.000001946,1.000001838,1.000001722,1.0000016,1.000001474,1.000001345,1.000001216,1.000001087,1.00000096,1.000000836,1.000000716,1.000000601,1.000000491,1.000000387,1.00000029,1.000000199,1.000000116,1.00000004,0.999999971,0.999999909,0.999999855,0.999999807,0.999999766,0.999999732,0.999999704,0.999999682,0.999999665,0.999999653,0.999999647,0.999999644,0.999999645,0.99999965,0.999999658,0.999999669,0.999999682,0.999999697,0.999999713,0.999999731,0.99999975,0.999999769,0.999999789,0.999999809,0.999999829,0.999999849,0.999999868,0.999999887,0.999999905,0.999999922,0.999999938,0.999999953]

    return t,sp,op,pv